{"changed":true,"filter":false,"title":"byotest.py","tooltip":"/byotest.py","value":"def test_are_equal(actual, expected):\n    \"\"\"\n    Test that two values are equal. Raises AssertionError if both values are\n    not equal.\n    `actual` is the actual value produced\n    `expected` is the value that was supposed to be produced\n    \"\"\"\n    assert expected == actual, \"Expected {0}, got {1}\".format(\n        expected, actual)\n\n\ndef test_not_equal(a, b):\n    \"\"\"\n    Test that two values are not equal. Raises AssertionError if both values\n    are not equal.\n    `a` is the actual value produced\n    `b` is the value that was supposed to be produced\n    \"\"\"\n    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)\n\n\ndef test_is_in(collection, item):\n    \"\"\"\n    Check to ensure that a given collection contains a given value. Raises\n    AssertionError if `item` is not in `collection`\n    `collection` is the collection to be tested\n    `item` is the item that is being searched for\n    \"\"\"\n    assert item in collection, \"{0} does not contain {1}\".format(\n        collection, item)\n\n\ndef test_not_in(collection, item):\n    \"\"\"\n    Check to ensure that a given collection does not contain a given value.\n    Raises AssertionError if the `item` is found in `collection`\n    `collection` is the collection in question\n    `item` is the thing that we want to check for\n    \"\"\"\n    assert item not in collection, \"{0} is not in {1}\".format(\n        item, collection)\n\n\ndef test_between(upper_limit, lower_limit, actual):\n    \"\"\"\n    Check to ensure that a number is between two other numbers. Raises\n    AssertionError if the number is not between the other two numbers\n    \"\"\"\n    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":48,"column":122},"action":"insert","lines":["def test_are_equal(actual, expected):","    \"\"\"","    Test that two values are equal. Raises AssertionError if both values are","    not equal.","    `actual` is the actual value produced","    `expected` is the value that was supposed to be produced","    \"\"\"","    assert expected == actual, \"Expected {0}, got {1}\".format(","        expected, actual)","","","def test_not_equal(a, b):","    \"\"\"","    Test that two values are not equal. Raises AssertionError if both values","    are not equal.","    `a` is the actual value produced","    `b` is the value that was supposed to be produced","    \"\"\"","    assert a != b, \"Did not expect {0} but got {1}\".format(a, b)","","","def test_is_in(collection, item):","    \"\"\"","    Check to ensure that a given collection contains a given value. Raises","    AssertionError if `item` is not in `collection`","    `collection` is the collection to be tested","    `item` is the item that is being searched for","    \"\"\"","    assert item in collection, \"{0} does not contain {1}\".format(","        collection, item)","","","def test_not_in(collection, item):","    \"\"\"","    Check to ensure that a given collection does not contain a given value.","    Raises AssertionError if the `item` is found in `collection`","    `collection` is the collection in question","    `item` is the thing that we want to check for","    \"\"\"","    assert item not in collection, \"{0} is not in {1}\".format(","        item, collection)","","","def test_between(upper_limit, lower_limit, actual):","    \"\"\"","    Check to ensure that a number is between two other numbers. Raises","    AssertionError if the number is not between the other two numbers","    \"\"\"","    assert lower_limit <= actual <= upper_limit, \"{0} is not between {1} and {2}\".format(actual, lower_limit, upper_limit)"],"id":1}]]},"ace":{"folds":[],"scrolltop":38.4375,"scrollleft":0,"selection":{"start":{"row":48,"column":122},"end":{"row":48,"column":122},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2,"state":"qqstring3","mode":"ace/mode/python"}},"timestamp":1568134811991}